---
- name: Determine which certificates already exist
  stat:
    path: "/secrets/{{ item }}.pem"
  register: result
  with_items:
    - admin
    - admin-key
    - ca
    - ca-key
    - kube-controller-manager
    - kube-controller-manager-key
    - kube-proxy
    - kube-proxy-key
    - kube-scheduler
    - kube-scheduler-key
    - kubernetes
    - kubernetes-key
    - service-account
    - service-account-key
    - worker-0
    - worker-0-key
    - worker-1
    - worker-1-key
    - worker-2
    - worker-2-key

- set_fact:
    existing_cert_names: "{{ result.results | selectattr('stat.exists', 'equalto', True) | map(attribute='item') | flatten }}"
    existing_cert_values: "{{ result.results | selectattr('stat.exists', 'equalto', True) | map(attribute='stat.exists') | flatten }}"

- set_fact:
    existing_certs: "{{ dict(existing_cert_names | zip(existing_cert_values)) }}"

- block:
  - name: Create the CA certificate and private key
    copy:
      dest: "/secrets/{{ item.split('.')[0] }}.json"
      content: "{{ lookup('template', item) | from_yaml | to_json }}"
    with_items:
      - ca-config.yaml.j2
      - ca-csr.yaml.j2
  - shell: cfssl gencert -initca /secrets/ca-csr.json | cfssljson -bare /secrets/ca
  when: "'ca' not in existing_certs"

- name: Create admin, kube-proxy certificates
  copy:
    dest: "/secrets/{{ item }}-csr.json"
    content: "{{ lookup('template', '{{ item }}-csr.yaml.j2') | from_yaml | to_json }}"
  with_items:
    - admin
    - kube-proxy
    - kube-controller-manager
    - kube-scheduler
    - service-account
  when: item not in existing_certs

- shell: >-
    cfssl gencert \
      -ca=/secrets/ca.pem \
      -ca-key=/secrets/ca-key.pem  \
      -config=/secrets/ca-config.json \
      -profile=kubernetes \
      "/secrets/{{ item }}-csr.json" | cfssljson -bare "/secrets/{{ item }}"
  with_items:
    - admin
    - kube-proxy
    - kube-controller-manager
    - kube-scheduler
    - service-account
  when: item not in existing_certs

- name: Create worker certificates
  copy: dest="/secrets/worker-{{ item }}-csr.json" content="{{ lookup('template', 'kubelet-csr.yaml.j2') | from_yaml | to_json }}"
  with_sequence: start=0 count=2
  when: '"worker-0" not in existing_certs or "worker-1" not in existing_certs'

- shell: >-
    if test -f "/cache/04-external-ip-{{ item }}"; \
    then \
      internal_ip=$(cat "/cache/04-internal-ip-{{ item }}"); \
      external_ip=$(cat "/cache/04-external-ip-{{ item }}"); \
    else \
      internal_ip=$(\
        az network nic show -n "worker-{{ item }}VMNic" -g '{{ azure_resource_group }}' \
           --query 'ipConfigurations[0].privateIpAddress' -o tsv); \
      external_ip=$(\
        az network public-ip show -n "worker-{{ item }}PublicIP" -g '{{ azure_resource_group }}' \
          --query 'ipAddress' -o tsv); \                                                                  
      printf "$internal_ip" > "/cache/04-internal-ip-{{ item }}"; \
      printf "$external_ip" > "/cache/04-external-ip-{{ item }}"; \
    fi; \
    hostname="worker-{{ item }}"; \
    cfssl gencert \
      -ca=/secrets/ca.pem \
      -ca-key=/secrets/ca-key.pem  \
      -config=/secrets/ca-config.json \
      -hostname="${hostname},${external_ip},${internal_ip}" \
      -profile=kubernetes \
      "/secrets/worker-{{ item }}-csr.json" | cfssljson -bare "/secrets/worker-{{ item }}"
  with_sequence: start=0 count=2
  when: '"worker-0" not in existing_certs or "worker-1" not in existing_certs'

- name: Create api-server certificate
  copy:
    dest: "/secrets/kubernetes-csr.json"
    content: "{{ lookup('template', 'kubernetes-csr.yaml.j2') | from_yaml | to_json }}"
  when: "'kubernetes' not in existing_certs"

- shell: >-
    kubernetes_hostnames="kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.default.svc.cluster.local,kubernetes.svc.cluster.local"; \
    internal_cache_key="/cache/04-internal-ip-api-server"; \
    external_cache_key="/cache/04-external-ip-api-server"; \
    if test -f "$internal_cache_key"; \
    then \
      internal_ips=$(cat "$internal_cache_key"); \
    else \
      internal_ips=$(az network nic list -g {{ azure_resource_group }} | \
        jq -r '[.[] | select(.name | contains("controller")) | .ipConfigurations[].privateIpAddress] | join(",")') && \
      echo "$internal_ips" > "$internal_cache_key"; \
    fi; \
    if test -f "$external_cache_key"; \
    then \
      api_server_ip=$(cat "$external_cache_key"); \
    else \
      api_server_ip=$(az network public-ip list -g "{{ azure_resource_group }}" | \
        jq -r '.[] | select(.name == "kubernetes-the-hard-way") | .ipAddress') && \
        echo "$api_server_ip" > "$external_cache_key"; \
    fi; \
    cfssl gencert \
      -ca=/secrets/ca.pem \
      -ca-key=/secrets/ca-key.pem  \
      -config=/secrets/ca-config.json \
      -hostname="10.32.0.1,$internal_ips,$api_server_ip,127.0.0.1,$kubernetes_hostnames" \
      -profile=kubernetes \
      "/secrets/kubernetes-csr.json" | cfssljson -bare "/secrets/kubernetes"
  when: "'kubernetes' not in existing_certs"

- name: Copy worker certs into workers
  shell: 
    cache_key="/cache/04-scp-worker-{{ item }}";
    if test -f "$cache_key";
    then return 0;
    fi;
    for ip in $(az network public-ip list | \
      jq -r '.[] | select(.name | contains("worker-{{ item }}")) | .ipAddress' \
      | grep -v "null");
    do
      for file in "ca.pem" "worker-{{ item }}.pem" "worker-{{ item }}-key.pem";
      do
        scp -i /secrets/kthw_ssh_key -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            "/secrets/$file" "ubuntu@$ip:/home/ubuntu/" && touch "$cache_key";
      done;
    done;
  with_sequence: start=0 count=2
  register: result

- name: Copy controller certs into controllers
  shell: 
    cache_key="/cache/04-scp-controller-{{ item }}"; \
    if test -f "$cache_key";
    then return 0;
    fi;
    for ip in $(az network public-ip list | \
      jq -r '.[] | select(.name | contains("controller-{{ item }}")) | .ipAddress' \
      | grep -v "null"); \
    do \
      for file in "ca.pem" \
        "ca-key.pem" \
        "kubernetes.pem" \
        "kubernetes-key.pem" \
        "service-account.pem" \
        "service-account-key.pem"; \
      do \
        scp -i /secrets/kthw_ssh_key -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            "/secrets/$file" "ubuntu@$ip:/home/ubuntu/" && touch "$cache_key"; \
      done; \
    done;
  with_sequence: start=0 count=3
  register: result
