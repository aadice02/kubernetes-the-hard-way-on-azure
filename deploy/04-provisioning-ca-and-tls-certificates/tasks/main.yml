---
- name: Create the CA certificate and private key
  copy:
    dest: "/secrets/{{ item.split('.')[0] }}.json"
    content: "{{ lookup('template', item) | from_yaml | to_json }}"
  with_items:
    - ca-config.yaml.j2
    - ca-csr.yaml.j2

- shell: cfssl gencert -initca /secrets/ca-csr.json | cfssljson -bare /secrets/ca

- name: Create admin, kube-proxy certificates
  copy:
    dest: "/secrets/{{ item }}-csr.json"
    content: "{{ lookup('template', '{{ item }}-csr.yaml.j2') | from_yaml | to_json }}"
  with_items:
    - admin
    - kube-proxy
    - kube-controller-manager
    - kube-scheduler
    - service-account

- shell: >-
    cfssl gencert \
      -ca=/secrets/ca.pem \
      -ca-key=/secrets/ca-key.pem  \
      -config=/secrets/ca-config.json \
      -profile=kubernetes \
      "/secrets/{{ item }}-csr.json" | cfssljson -bare "/secrets/{{ item }}"
  with_items:
    - admin
    - kube-proxy
    - kube-controller-manager
    - kube-scheduler
    - service-account

- name: Create worker certificates
  copy:
    dest: "/secrets/worker-{{ item }}-csr.json"
    content: "{{ lookup('template', 'kubelet-csr.yaml.j2') | from_yaml | to_json }}"
  with_sequence: start=0 count=3

- shell: >-
    if test -f "/cache/internal-ip-{{ item }}" && test -f "/cache/external-ip-{{ item }}"; \
    then \
      internal_ip=$(cat "/cache/internal-ip-{{ item }}"); \
      external_ip=$(cat "/cache/external-ip-{{ item }}"); \
    else \
      internal_ip=$(\
        az network nic show -n "worker-{{ item }}VMNic" -g '{{ azure_resource_group }}' | \
        jq -r .ipConfigurations.privateIpAddress); \
      external_ip=$(\
        az network nic show -n "worker-{{ item }}PublicIP" -g '{{ azure_resource_group }}' | \
        jq -r .ipAddress); \
      printf "$internal_ip" > "/cache/internal-ip-{{ item }}"; \
      printf "$external_ip" > "/cache/external-ip-{{ item }}"; \
    fi; \
    hostname=$(hostname); \
    cfssl gencert \
      -ca=/secrets/ca.pem \
      -ca-key=/secrets/ca-key.pem  \
      -config=/secrets/ca-config.json \
      -hostname="$hostname,$external_ip,$internal_ip" \
      -profile=kubernetes \
      "/secrets/worker-{{ item }}-csr.json" | cfssljson -bare "/secrets/worker-{{ item }}"
  with_sequence: start=0 count=3

- name: Create api-server certificate
  copy:
    dest: "/secrets/kubernetes-csr.json"
    content: "{{ lookup('template', 'kubernetes-csr.yaml.j2') | from_yaml | to_json }}"

- shell: >-
    kubernetes_hostnames="kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.default.svc.cluster.local,kubernetes.svc.cluster.local"; \
    internal_cache_key="/cache/internal-ip-api-server"; \
    external_cache_key="/cache/external-ip-api-server"; \
    if test -f "$internal_cache_key"; \
    then \
      internal_ips=$(cat "$internal_cache_key"); \
    else \
      internal_ips=$(az network nic list -g {{ azure_resource_group }} | \
        jq -r '[.[] | select(.name | contains("controller")) | .ipConfigurations[].privateIpAddress] | join(",")') && \
      echo "$internal_ips" > "$internal_cache_key"; \
    fi; \
    if test -f "$external_cache_key"; \
    then \
      api_server_ip=$(cat "$external_cache_key"); \
    else \
      api_server_ip=$(az network public-ip list -g "{{ azure_resource_group }}" | \
        jq -r '.[] | select(.name == "kubernetes-the-hard-way") | .ipAddress') && \
        echo "$api_server_ip" > "$external_cache_key"; \
    fi; \
    cfssl gencert \
      -ca=/secrets/ca.pem \
      -ca-key=/secrets/ca-key.pem  \
      -config=/secrets/ca-config.json \
      -hostname="10.32.0.1,$internal_ips,$api_server_ip,127.0.0.1,$kubernetes_hostnames" \
      -profile=kubernetes \
      "/secrets/kubernetes-csr.json" | cfssljson -bare "/secrets/kubernetes"

- name: Copy worker certs into workers
  shell: 
    cache_key="/cache/scp-worker-{{ item }}";
    if test -f "$cache_key";
    then return 0;
    fi;
    for ip in $(az network public-ip list | \
      jq -r '.[] | select(.name | contains("worker-{{ item }}")) | .ipAddress' \
      | grep -v "null");
    do
      for file in "ca.pem" "worker-{{ item }}.pem" "worker-{{ item }}-key.pem";
      do
        scp -i /secrets/kthw_ssh_key -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            "/secrets/$file" "ubuntu@$ip:/home/ubuntu/" && touch "$cache_key";
      done;
    done;
  with_sequence: start=0 count=2
  register: result

- name: Copy controller certs into controllers
  shell: 
    cache_key="/cache/scp-controller-{{ item }}"; \
    if test -f "$cache_key";
    then return 0;
    fi;
    for ip in $(az network public-ip list | \
      jq -r '.[] | select(.name | contains("controller-{{ item }}")) | .ipAddress' \
      | grep -v "null"); \
    do \
      for file in "ca.pem" \
        "ca-key.pem" \
        "kubernetes.pem" \
        "kubernetes-key.pem" \
        "service-account.pem" \
        "service-account-key.pem"; \
      do \
        scp -i /secrets/kthw_ssh_key -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            "/secrets/$file" "ubuntu@$ip:/home/ubuntu/" && touch "$cache_key"; \
      done; \
    done;
  with_sequence: start=0 count=3
  register: result
