---
- name: Autoregister providers as needed
  shell: az config set extension.use_dynamic_install=yes_without_prompt

# 10.128.0.0/9 is what Google Cloud uses for auto subnets, so that's what we'll
# try using here.
# https://cloud.google.com/vpc/docs/vpc#subnet-ranges
- name: Create a virtual network for our Kubernetes cluster
  shell: >
    cache_key="/cache/vnet_kthw"; \
    test -f "$cache_key" && exit 0; \
    az network vnet create -g "{{ azure_resource_group }}" -n kthw \
      --address-prefixes 10.128.0.0/9 \
      --subnet-name kthw-subnet \
      --subnet-prefixes 10.240.0.0/24 2>&1 && touch "$cache_key"

- name: Create the NSG for this vNet
  shell: >
    cache_key="/cache/kthw-nsg"; \
    test -f "$cache_key" && exit 0; \
    az network nsg create -g "{{ azure_resource_group }}" -n kthw-nsg && touch "$cache_key"

- name: Create NSG rules
  shell: >-
    cache_key="/cache/nsg_$(echo "{{ item }}" | md5sum | cut -f1 -d '-' | tr -dc '[a-zA-Z0-9]')"; \
    if test -f "$cache_key"; \
    then \
      >&2 echo "NSG rule already deployed, skipping: {{ item }}"; \
      exit 0; \
    fi; \
    name="$(echo "{{ item }}" | awk '{% raw %}{ print $1 }{% endraw %}')"; \
    priority="$(echo "{{ item }}" | awk '{% raw %}{ print $2 }{% endraw %}')"; \
    permission="$(echo "{{ item }}" | awk '{% raw %}{ print $3 }{% endraw %}')"; \
    protocol_and_port="$(echo "{{ item }}" | awk '{% raw %}{ print $4 }{% endraw %}')"; \
    if echo "$protocol_and_port" | grep -q ':'; \
    then \
      protocol=$(echo "$protocol_and_port" | cut -f1 -d ':'); \
      port=$(echo "$protocol_and_port" | cut -f2 -d ':'); \
    else \
      protocol="$(echo "$protocol_and_port" | cut -f1 -d ':')"; \
      port="*"; \
    fi; \
    from="$(echo "{{ item }}" | awk '{% raw %}{ print $6 }{% endraw %}')"; \
    to="$(echo "{{ item }}" | awk '{% raw %}{ print $8 }{% endraw %}')"; \
    cmd="az network nsg rule create -g {{ azure_resource_group }} --nsg-name kthw-nsg
      --name $name  
      --priority $priority
      --access $permission
      --source-address-prefixes $from
      --source-port-ranges $port
      --protocol $protocol
      --destination-address-prefixes $to
      --destination-port-ranges $port"; \
    echo "Going to run: $cmd" >> /tmp/commands.log ; \
    $cmd 2>&1 | tee -a /tmp/commands.log && touch "$cache_key";
  with_items:
    -  "allow_tcp_service_cidr_to_vnet 101 allow tcp from 10.200.0.0/16 to 10.240.0.0/24"
    -  "allow_udp_service_cidr_to_vnet 103 allow udp from 10.200.0.0/16 to 10.240.0.0/24"
    -  "allow_icmp_service_cidr_to_vnet 105 allow icmp from 10.200.0.0/16 to 10.240.0.0/24"
    -  "allow_tcp_vnet_to_service_cidr 102 allow tcp from 10.240.0.0/24 to 10.240.0.0/16"
    -  "allow_udp_vnet_to_service_cidr 104 allow udp from 10.240.0.0/24 to 10.240.0.0/16"
    -  "allow_icmp_vnet_to_service_cidr 106 allow icmp from 10.240.0.0/24 to 10.240.0.0/16"
    -  "allow_ssh_inet_to_vnet 107 allow tcp:22 from 0.0.0.0/0 to 10.240.0.0/24"
    -  "allow_kubeapi_inet_to_vnet 108 allow tcp:6443 from 0.0.0.0/0 to 10.240.0.0/24"
    -  "allow_icmp_inet_to_vnet 109 allow icmp from 0.0.0.0/0 to 10.240.0.0/24"

- name: Create an SSH key for our nodes if one doesn't exist
  stat:
    path: /secrets/kthw_ssh_key
  register: node_ssh_key

- shell: ssh-keygen -t rsa -b 2048 -f /secrets/kthw_ssh_key -q -N ''
  when: not node_ssh_key.stat.exists

- name: Create the control plane
  shell: >-
    vm_name="controller-{{ item }}"; \
    cache_key="/cache/$(echo "$vm_name" | md5sum | cut -f1 -d '-' | tr -dc '[a-zA-Z0-9]')"; \
    if test -f "$cache_key"; \
    then \
      >&2 echo "INFO: VM already created; skipping: $vm_name"; \
      exit 0; \
    fi; \
    az vm create -g '{{ azure_resource_group }}' \
      --name "$vm_name" \
      --computer-name "$vm_name" \
      --image "Canonical:0001-com-ubuntu-server-focal:20_04-lts-gen2:20.04.202103230" \
      --priority "Spot" \
      --max-price "0.04" \
      --size "Standard_D2s_v4" \
      --private-ip-address "10.240.0.1{{ item }}" \
      --public-ip-address-allocation static \
      --public-ip-sku Standard \
      --subnet kthw-subnet \
      --vnet-name kthw \
      --os-disk-name "kthw-cp-disk-{{ item }}" \
      --os-disk-size-gb "200" \
      --admin-username "ubuntu" \
      --ssh-key-values /secrets/kthw_ssh_key.pub && touch "$cache_key"
  with_sequence: start=0 count=3

- name: Create the workers
  shell: >-
    vm_name="worker-{{ item }}"; \
    cache_key="/cache/$(echo "$vm_name" | md5sum | cut -f1 -d '-' | tr -dc '[a-zA-Z0-9]')"; \
    if test -f "$cache_key"; \
    then \
      >&2 echo "INFO: VM already created; skipping: $vm_name"; \
      exit 0; \
    fi; \
    az vm create -g '{{ azure_resource_group }}' \
      --name "$vm_name" \
      --computer-name "$vm_name" \
      --image "Canonical:0001-com-ubuntu-server-focal:20_04-lts-gen2:20.04.202103230" \
      --priority "Spot" \
      --max-price "0.04" \
      --size "Standard_D2s_v4" \
      --private-ip-address "10.240.0.2{{ item }}" \
      --subnet kthw-subnet \
      --vnet-name kthw \
      --os-disk-name "worker-disk-{{ item }}" \
      --os-disk-size-gb "200" \
      --admin-username "ubuntu" \
      --public-ip-address-allocation static \
      --public-ip-sku Standard \
      --ssh-key-values /secrets/kthw_ssh_key.pub && touch "$cache_key"
  with_sequence: start=0 count=2

- name: Configure IP forwarding for the controllers
  shell:
    vm_name="kthw-nic-controller{{ item }}"; \
    cache_key="/cache/$(echo "$vm_name" | md5sum | cut -f1 -d '-' | tr -dc '[a-zA-Z0-9]')"; \
    test -f "$cache_key" && exit 0; \
    az network nic update -g '{{ azure_resource_group }}' \
      --name "controller-{{ item }}VMNic" \
      --ip-forwarding true && touch "$cache_key"
  with_sequence: start=0 count=3

- name: Configure IP forwarding for the workers
  shell:
    vm_name="kthw-nic-worker{{ item }}"; \
    cache_key="/cache/$(echo "$vm_name" | md5sum | cut -f1 -d '-' | tr -dc '[a-zA-Z0-9]')"; \
    test -f "$cache_key" && exit 0; \
    az network nic update -g '{{ azure_resource_group }}' \
      --name "worker-{{ item }}VMNic" \
      --ip-forwarding true && touch "$cache_key"
  with_sequence: start=0 count=2

# LOL.
# Be me.
# Go through labs.
# Try to create a lb.
# Learn that you can't.
# Why?
# You can't map a public IP with a Basic SKU to a load balancer with a non-Basic SKU.
# You can't create a network probe against a Basic SKU load balancer.
# You can't 'upgrade' a public IP to a Standard SKU.
# Only solution?
# DELETE EVERYTHING AND START THE FUCK OVER.
# Azure is death by ten thousand cuts.
# Yes, I'm leaving this comment in the production release of this guide.
- name: Create a public IP for our API server
  shell:
    cache_key="/cache/pip-api-server"; \
    test -f "$cache_key" && exit 0; \
    az network public-ip create -g '{{ azure_resource_group }}' \
      --name "kubernetes-the-hard-way" \
      --sku Standard \
      --allocation-method Static && touch "$cache_key"
