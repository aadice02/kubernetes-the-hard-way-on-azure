---
- name: Ensure the CA root certificate is correct
  shell: >-
    openssl x509 -in /secrets/ca.pem 2>/dev/null -text -noout | \
    grep "Subject:" | \
    sed 's/^ \+//' | \
    sed 's/ = /=/g'
  register: result

- set_fact:
    want: "Subject: C=US, ST=Texas, L=Dallas, O=Kubernetes, OU=CA, CN=Kubernetes"
    got: "{{ result.stdout }}"

- fail:
    msg: "want: {{ want }}, got: {{ got }}"
  when: want != got

- name: Ensure that admin certificate is correct and has the CA in its chain
  shell: >-
    openssl verify -CAfile /secrets/ca.pem /secrets/admin.pem
  register: result

- set_fact:
    want: "/secrets/admin.pem: OK"
    got: "{{ result.stdout }}"

- fail:
    msg: "want: {{ want }}, got: {{ got }}"
  when: want != got

- name: Ensure that each worker's cert is present and validates
  shell: >-
    for idx in $(seq 0 2); \
    do openssl verify -CAfile /secrets/ca.pem "/secrets/worker-$idx.pem"; \
    done;
  register: result

- set_fact:
    want:
      - "/secrets/worker-0.pem: OK"
      - "/secrets/worker-1.pem: OK"
      - "/secrets/worker-2.pem: OK"
    got: "{{ result.stdout.split('\n') }}"

- set_fact:
    diff: "{{ want | difference(got) }}"

- fail:
    msg: "want: {{ want }}, got: {{ got }}, diff: {{ diff }}"
  when: diff | length > 0

- name: Ensure that kube-proxy certificate is correct and has the CA in its chain
  shell: >-
    openssl verify -CAfile /secrets/ca.pem /secrets/kube-proxy.pem
  register: result

- set_fact:
    want: "/secrets/kube-proxy.pem: OK"
    got: "{{ result.stdout }}"

- fail:
    msg: "want: {{ want }}, got: {{ got }}"
  when: want != got

- name: Ensure that kube-controller-manager certificate is correct and has the CA in its chain
  shell: >-
    openssl verify -CAfile /secrets/ca.pem /secrets/kube-controller-manager.pem
  register: result

- set_fact:
    want: "/secrets/kube-controller-manager.pem: OK"
    got: "{{ result.stdout }}"

- fail:
    msg: "want: {{ want }}, got: {{ got }}"
  when: want != got

- name: Ensure that kube-scheduler certificate is correct and has the CA in its chain
  shell: >-
    openssl verify -CAfile /secrets/ca.pem /secrets/kube-scheduler.pem
  register: result

- set_fact:
    want: "/secrets/kube-scheduler.pem: OK"
    got: "{{ result.stdout }}"

- fail:
    msg: "want: {{ want }}, got: {{ got }}"
  when: want != got

- name: Ensure that the Kubernetes API server certificate is correct and has the CA in its chain
  shell: >-
    openssl verify -CAfile /secrets/ca.pem /secrets/kubernetes.pem
  register: result

- set_fact:
    want: "/secrets/kubernetes.pem: OK"
    got: "{{ result.stdout }}"

- fail:
    msg: "want: {{ want }}, got: {{ got }}"
  when: want != got

- name: Ensure that the Kubernetes API server certificate has the correct SANs
  shell: >-
    control_plane_ips=$(az network nic list -g '{{ azure_resource_group }}' | \
      jq -r '[.[] | select(.name | contains("controller")) | .ipConfigurations[] | .privateIpAddress] | join(",")'); \
    kube_public_ip=$(az network public-ip show -g '{{ azure_resource_group }}' -n "kubernetes-the-hard-way" | \
      jq -r '.ipAddress'); \
    echo "10.32.0.1,127.0.0.1,${control_plane_ips},${kube_public_ip},kubernetes.default.svc.cluster.local,kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.default.svc.cluster.local,kubernetes.svc.cluster.local" | \
    tr "," "\n" | \
    sort -u;
  register: want_result

- shell: >-
    openssl x509 -in /secrets/kubernetes.pem -noout -text | \
    grep "DNS:" | \
    tr ',' '\n' | \
    sed 's/.*DNS://g' | \
    sed 's/.*IP Address://g' | \
    sort -u;
  register: got_result

- set_fact:
    want: "{{ want_result.stdout.split('\n') }}"
    got: "{{ got_result.stdout.split('\n') }}"

- set_fact:
    diff: "{{ want | difference(got) }}"

- fail:
    msg: "want: {{ want }}; got: {{ got }}; diff: {{ diff }}"
  when: diff | length > 0

- name: Ensure that service-account certificate is correct and has the CA in its chain
  shell: >-
    openssl verify -CAfile /secrets/ca.pem /secrets/service-account.pem
  register: result

- set_fact:
    want: "/secrets/service-account.pem: OK"
    got: "{{ result.stdout }}"

- fail:
    msg: "want: {{ want }}, got: {{ got }}"
  when: want != got

- name: Ensure workers have the worker certs
  shell: >-
    for ip in $(az network public-ip list | \
      jq -r '.[] | select(.name | contains("worker")) | .ipAddress' \
      | grep -v "null"); \
    do \
      ssh -i /secrets/kthw_ssh_key -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          "ubuntu@$ip" "find /home/ubuntu -name '*.pem'"; \
    done;
  register: result
  ignore_errors: true

- set_fact:
    want:
      - /home/ubuntu/ca.pem
      - /home/ubuntu/worker-0.pem
      - /home/ubuntu/worker-0-key.pem
      - /home/ubuntu/worker-1.pem
      - /home/ubuntu/worker-1-key.pem
    got: "{{ result.stdout.split('\n') | unique }}"

- set_fact:
    diff: "{{ want | difference(got) }}"

- fail:
    msg: "want: {{ want }}, got: {{ got }}, diff: {{ diff }}"
  when: diff | length > 0

- name: Ensure controllers have the controller certs
  shell: >-
    for ip in $(az network public-ip list | \
      jq -r '.[] | select(.name | contains("control-plane")) | .ipAddress' \
      | grep -v "null"); \
    do \
      ssh -i /secrets/kthw_ssh_key -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          "ubuntu@$ip" "find /home/ubuntu -name '*.pem'"; \
    done;
  register: result
  ignore_errors: true

- set_fact:
    want:
      - /home/ubuntu/ca.pem
      - /home/ubuntu/ca-key.pem
      - /home/ubuntu/kubernetes.pem
      - /home/ubuntu/kubernetes-key.pem
      - /home/ubuntu/service-account.pem
      - /home/ubuntu/service-account-key.pem
    got: "{{ result.stdout.split('\n') | unique }}"

- set_fact:
    diff: "{{ want | difference(got) }}"

- fail:
    msg: "want: {{ want }}, got: {{ got }}, diff: {{ diff }}"
  when: diff | length > 0

